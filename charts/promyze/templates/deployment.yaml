---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: front
  labels:
  {{- range $key, $value := .Values.app.labels }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
  annotations:
  {{- range $key, $value := .Values.app.annotations }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
spec:
  replicas: {{ .Values.app.front.replicas }}
  selector:
    matchLabels:
      component: front
  template:
    metadata:
      labels:
        component: front
      {{- range $key, $value := .Values.app.labels }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      annotations:
      {{- range $key, $value := .Values.app.annotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
    spec:
      containers:
        - name: front
          {{- if .Values.app.images.tag }}
          image: {{ .Values.app.images.proxy }}:{{ .Values.app.images.tag }}
          {{ else }}
          image: {{ .Values.app.images.proxy }}
          {{- end }}
          {{- if .Values.app.images.imagePullPolicy }}
          imagePullPolicy:  {{ .Values.app.images.imagePullPolicy }}
          {{- end }}
          {{- if .Values.app.resources.front }}
          resources:
            {{- toYaml .Values.app.resources.front | nindent 12 }}
          {{- end }}
          ports:
            - containerPort: 3001
          env:
            - name: K8S
              value: 'true'
          livenessProbe:
            httpGet:
              path: /
              port: 3001
            initialDelaySeconds: 30
            periodSeconds: 30
      {{- if and .Values.app.images.secret .Values.app.images.secret.name }}
      imagePullSecrets:
        - name: {{ .Values.app.images.secret.name }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app
  labels:
  {{- range $key, $value := .Values.app.labels }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
  annotations:
  {{- range $key, $value := .Values.app.annotations }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
spec:
  selector:
    matchLabels:
      component: app
  template:
    metadata:
      labels:
        component: app
      {{- range $key, $value := .Values.app.labels }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      annotations:
      {{- range $key, $value := .Values.app.annotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
    spec:
      initContainers:
        - name: init-container-app
          image: busybox:1.34
          command: ['sh', '-c', 'echo Wait for mongoDB to be up and running; sleep 30;']
          {{- if .Values.app.resources.api }}
          resources:
            {{- toYaml .Values.app.resources.api | nindent 12 }}
          {{- end }}
      containers:
        - name: app
          {{- if .Values.app.images.tag }}
          image: {{ .Values.app.images.api }}:{{ .Values.app.images.tag }}
          {{- else }}
          image: {{ .Values.app.images.api }}
          {{- end }}
          {{- if .Values.app.images.imagePullPolicy }}
          imagePullPolicy:  {{ .Values.app.images.imagePullPolicy }}
          {{- end }}
          {{- if .Values.app.resources.api }}
          resources:
            {{- toYaml .Values.app.resources.api | nindent 12 }}
          {{- end }}
          ports:
            - containerPort: 3000
          livenessProbe:
           httpGet:
             path: /open/healthcheck/ping
             port: 3000
           initialDelaySeconds: 30
           periodSeconds: 30
          env:
            - name: NO_ENGINE
              value: 'true'
            - name: MONGO_URI
              {{- if .Values.app.databaseUri.value }}
              value: {{ .Values.app.databaseUri.value }}
              {{- end }}
              {{- if .Values.app.databaseUri.secret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.app.databaseUri.secret.name }}
                  key: {{ .Values.app.databaseUri.secret.key }}
              {{- end }}
            {{- range $key, $value := .Values.app.variables }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- range $key, $value := .Values.app.secrets }}
            - name: {{ $value.envVariable }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.secretName }}
                  key: {{ $value.secretKey }}
            {{- end }}
      {{- if and .Values.app.images.secret .Values.app.images.secret.name }}
      imagePullSecrets:
        - name: {{ .Values.app.images.secret.name }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: suggestions
  labels:
  {{- range $key, $value := .Values.app.labels }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
  annotations:
  {{- range $key, $value := .Values.app.annotations }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
spec:
  replicas: {{ .Values.app.suggestions.replicas }}
  selector:
    matchLabels:
      component: suggestions
  template:
    metadata:
      labels:
        component: suggestions
      {{- range $key, $value := .Values.app.labels }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      annotations:
      {{- range $key, $value := .Values.app.annotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
    spec:
      initContainers:
        - name: init-container-suggestions
          image: busybox:1.34
          command: ['sh', '-c', 'echo Wait for mongoDB to be up and running; sleep 30;']
      containers:
        - name: suggestions
          {{- if .Values.app.images.tag }}
          image: {{ .Values.app.images.suggestions }}:{{ .Values.app.images.tag }}
          {{ else }}
          image: {{ .Values.app.images.suggestions }}
          {{- end }}
          {{- if .Values.app.images.imagePullPolicy }}
          imagePullPolicy:  {{ .Values.app.images.imagePullPolicy }}
          {{- end }}
          {{- if .Values.app.resources.suggestions }}
          resources:
            {{- toYaml .Values.app.resources.suggestions | nindent 12 }}
          {{- end }}
          ports:
            - containerPort: 3000
          livenessProbe:
           httpGet:
             path: /open/healthcheck/ping
             port: 3000
           initialDelaySeconds: 30
           periodSeconds: 30
          env:
            - name: MONGO_URI
              {{- if .Values.app.databaseUri.value }}
              value: {{ .Values.app.databaseUri.value }}
              {{- end }}
              {{- if .Values.app.databaseUri.secret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.app.databaseUri.secret.name }}
                  key: {{ .Values.app.databaseUri.secret.key }}
              {{- end }}
            {{- range $key, $value := .Values.app.variables }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- range $key, $value := .Values.app.secrets }}
            - name: {{ $value.envVariable }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.secretName }}
                  key: {{ $value.secretKey }}
            {{- end }}
      {{- if and .Values.app.images.secret .Values.app.images.secret.name }}
      imagePullSecrets:
        - name: {{ .Values.app.images.secret.name }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{ if .Values.app.databaseEmbedded.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  labels:
    component: mongodb
  {{- range $key, $value := .Values.app.labels }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
  annotations:
  {{- range $key, $value := .Values.app.annotations }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
spec:
  selector:
    matchLabels:
      component: mongodb
  template:
    metadata:
      labels:
        component: mongodb
      {{- range $key, $value := .Values.app.labels }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      annotations:
      {{- range $key, $value := .Values.app.annotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
    spec:
      containers:
      - name: mongodb
        image: mongo:4.4.1
        {{- if .Values.app.resources.mongodb }}
        resources:
          {{- toYaml .Values.app.resources.mongodb | nindent 12 }}
        {{- end }}
        ports:
          - containerPort: 27017
        {{ if .Values.app.databaseEmbedded.pvc.enabled }}
        volumeMounts:
        - name: mongo-data-dir
          mountPath: /data/db
        {{ end }}
      {{ if .Values.app.databaseEmbedded.pvc.enabled }}
      volumes:
      - name: mongo-data-dir
        persistentVolumeClaim:
          claimName: mongo-pvc
      {{ end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{ end }}
