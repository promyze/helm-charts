# images:
#   secret:
#     name: docker-registry-key
#     dockerconfigjson: ""

ingress:
  enabled: true
  # className: "TO_FILL"
  annotations:
    cert-manager.io/cluster-issuer: "TO_FILL"
  labels: {}
  tls:
    # enable if you use TLS (recommended)
    enabled: false
    # secrets:
    #   secretName: sso-tls-secret
  hostnames:
    - sso.acme.com # main root url, update the five below
    - saml.sso.acme.com
    - dashboard.sso.acme.com
    - accounts.sso.acme.com
    - onboarding.sso.acme.com
    - ui-components.sso.acme.com

vault:
  #image: cryptr/promyze-vault
  image: registry.gitlab.com/promyze/app/sso-cryptr:vault-amd64
  env:
    JWT_ISSUER: "promyze-vault-eu"
    #This can be passed as secrets below
    DATABASE_URL: "postgres://postgres:postgres@postgres:5432/vault" # if you use the default postgres
    # TO FILL or use secrets. See the documentation on how to generate these values.
    JWT_SECRET_KEY: ''
    AES_SECRET_KEY: ''
    SECRET_KEY_BASE: ''
    RELEASE_COOKIE: ''
    # If secrets are embedded
    #secretsName: vault-secrets
#   secrets:
#     - DATABASE_URL
#     - JWT_SECRET_KEY
#     - AES_SECRET_KEY
#     - SECRET_KEY_BASE
#     - RELEASE_COOKIE
  persistence:
    enabled: true
    storageClass: local-path
    accessMode: ReadWriteOnce
    size: 256Mi

postgres:
  image: timescale/timescaledb:latest-pg14
  env:
    POSTGRES_USER: "postgres"
    POSTGRES_PASSWORD: "postgres"
  persistence:
    enabled: true
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 256Mi

cryptr:
  #image: cryptr/promyze-app
  image: registry.gitlab.com/promyze/app/sso-cryptr:cryptr-amd64
  env:
    #Main Domain Name
    HOST_DOMAIN_NAME: "cryptr.acme.com" # Your main cryptr domain
    HOST_DOMAIN_URL: "https://cryptr.acme.com" # Your main cryptr URL

    # Should not be changed
    VAULT_URL: "http://vault:4000" # Internal service

    # Change if you use a different database
    DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/cryptr"
    TIMESCALE_DB_URL: "postgresql://postgres:postgres@postgres:5432/cryptr_logs"

    # See the doc (README.md) on how to generate these values
    VAULT_CLIENT_ID: ""
    # TO FILL or use secrets.
    VAULT_CLIENT_SECRET: ""

    # Either use Dashboard Backdoor
    DASHBOARD_BACKDOOR: "true"
    DASHBOARD_EMAIL: "<your_email>"
    DASHBOARD_PASSWORD: "" # At least 18 characters - this can be also be passed as a secret

    #### All of these will be generated by ./get_secret_crypr.sh - you can insert them or use the 'secrets' section below
    AES_SECRET_KEY: ''
    ### API Key Secrets
    API_KEY_SECRET_BASE: ''
    SANDBOX_API_KEY_PEPPER: ''
    SANDBOX_API_KEY_SECRET_BASE: ''
    CLIENT_SECRET_SALT: ''
    TENANT_API_SECRET_KEY: ''
    ### Directory Sync Secrets
    DIR_SYNC_SECRET_BASE: ''
    SANDBOX_DIR_SYNC_SECRET_BASE: ''
    DIRECTORY_SYNC_PEPPER: ''
    ### Endpoint Security
    SECRET_KEY_BASE: ''
    ### Refresh Token
    REFRESH_TOKEN_SECRET_KEY: ''
    SERVICE_MANAGER_SECRET: ''
    #Sent by Packmind - Reach us to get the value
    LICENSE_KEY: ''

# secretsName: vault-cryptr
# secrets:
#   - AES_SECRET_KEY
#   - API_KEY_SECRET_BASE
#   - SANDBOX_API_KEY_PEPPER
#   - SANDBOX_API_KEY_SECRET_BASE
#   - CLIENT_SECRET_SALT
#   - TENANT_API_SECRET_KEY
#   - DIR_SYNC_SECRET_BASE
#   - SANDBOX_DIR_SYNC_SECRET_BASE
#   - DIRECTORY_SYNC_PEPPER
#   - SECRET_KEY_BASE
#   - REFRESH_TOKEN_SECRET_KEY
#   - SERVICE_MANAGER_SECRET
#   - LICENSE_KEY
#   - DASHBOARD_PASSWORD
#   - VAULT_CLIENT_SECRET

